[gd_scene load_steps=8 format=2]

[ext_resource path="res://ReusableGameObjects/Star/StarAvatar.gd" type="Script" id=2]

[sub_resource type="SphereMesh" id=1]

[sub_resource type="CubeMap" id=2]

[sub_resource type="VisualShaderNodeCubeMap" id=3]
output_port_for_preview = 0
cube_map = SubResource( 2 )
texture_type = 1

[sub_resource type="VisualShaderNodeCubeMapUniform" id=4]
uniform_name = "CubeMapUniform"
texture_type = 2

[sub_resource type="VisualShader" id=5]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform samplerCube cube_frg_2 : hint_albedo;



void vertex() {
// Output:0

}

void fragment() {
// CubeMap:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 cube_frg_2_read = texture(cube_frg_2 , vec3(UV, 0.0));
		n_out2p0 = cube_frg_2_read.rgb;
		n_out2p1 = cube_frg_2_read.a;
	}

// Output:0
	ALBEDO = n_out2p0;
	EMISSION = n_out2p0;
	RIM = dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -556, 0 )
nodes/fragment/0/position = Vector2( 40, 100 )
nodes/fragment/2/node = SubResource( 3 )
nodes/fragment/2/position = Vector2( -260, 100 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( -500, 100 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 2, 0, 0, 5, 2, 0, 0, 10 )

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )

[node name="Star" type="MeshInstance"]
transform = Transform( 1, 0, 0, 0, 0.899703, 0.436504, 0, -0.436504, 0.899703, 0.0331523, -0.0439008, -0.0120299 )
mesh = SubResource( 1 )
material/0 = SubResource( 6 )
script = ExtResource( 2 )
